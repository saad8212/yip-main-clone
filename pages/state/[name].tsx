import Head from "next/head";
import ProviderBenifits from "../../components/california/provider-benifits/ProviderBenifits";
import Yiptrustbox from "../../components/california/yip-trsut/Yiptrustbox";
import InternetLatestBlogs from "../../components/california/latest-blogs/InternetLatestBlogs";
import TopProviders from "../../components/california/top-providers/TopProviders";
import getBlogs from "../../controllers/getBlogs";
import Banner from "../../components/california/banner/Banner";

// data
import states from "../../data/state.json";

const State = ({ data }: any) => {
  return (
    <>
      <Head>
        <title>{data?.name}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="robots" content="index,follow" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Banner data={data} />
        <div className="providers_page_bg">
          <div className="providers_page_bg_inner">
            <ProviderBenifits dataProvider={data} />
            <Yiptrustbox />
            <TopProviders />
            {/* <InternetLatestBlogs blogs={data} /> */}
          </div>
        </div>
      </main>
    </>
  );
};

export async function getStaticProps(context: any) {
  const { name } = context.params;
  const response = await fetch(
    `https://backed-yip.vercel.app/address?zip_code=${name}`
  );
  const provider = await response.json();
  if (provider.length < 1) {
    return {
      props: {
        data: [],
      },
    };
  }
  return {
    props: {
      data: provider,
    },
  };
}
export async function getStaticPaths(context: any) {
  //     const {name} = context.params;

  //   const response = await fetch(`https://backed-yip.vercel.app/address?zip_code=${name}`) ;
  //   const provider = await response.json();

  // Get the paths we want to pre-render based on blogs
  //   const paths = provider.map((blog: any) => ({
  //     params: { name: blog.slug },
  //   }));
  const paths = states.map((state) => ({
    params: {
      name: state.url.split("/state/")[1],
    },
  }));

  return { paths, fallback: true };
}
export default State;
